II.1.

a)
	num arpões
	num peixes

b)
	sente_peixe
	peixe_atingido
	
	deposito_cheio

c)

Situação					Atualização			Ação
-------------------------------------------------------------------------------------------

sente_peixe & n_arpoes>0 &n_peixes<20		n_arpoes <- n_arpoes-1		Disparar
& ~peixe_atingido
-------------------------------------------------------------------------------------------
peixe_atingido					n_peixes <- n_peixes+1		Agarrar
						n_arpoes <- n_arpoes+1
-------------------------------------------------------------------------------------------
n_arpoes == 0					n_arpoes <- 10			Reabastecer
-------------------------------------------------------------------------------------------
n_peixes == 20					n_peixes <- 0			Descarregar
-------------------------------------------------------------------------------------------
~sente_peixe & ~peixe_atingido							Vaguear
&  n_arpoes>0 & n_peixes<20
-------------------------------------------------------------------------------------------


III.2.

(a) ¬Clear(B1) ∧ ¬Clear(B2) ∧ ∃x(On(B3, x) ∧ x != Floor)
Sol:
	|B3|
	|B2|
________|B1|________	Resposta: 3

(b) Clear(B1) => Clear(B2)
	ou
    ~Clear(B1) v Clear(B2)

Sol:
____|B1|____|B2|____

(ou)
       |B2|
_______|B1|_________     Resposta: 2





III.3.

(a)   (legenda: Water(T1) significa que T1 tem água)

_____________________________________________Water(T1)_________Water(T2)________Water(R)__________
Open(T2) ∧ Over(R, T2)			 	V,F		F		V	
Open(T2) ∧ Over(R, T1)				F		V		V,F						    	
¬Open(T2) ∧ Over(R, T1)				F		V,F		V,F
¬Open(T1) ∧ ¬Open(T2) ∧ Over(R, T1)		F		V,F		V,F


(b)	Tautologia é uma fórmula que é verdadeira em qualquer interpretação

∀x (¬(¬Open(x) => Water(x)))
∀x (¬(Open(x) v Water(x)))
∀x (¬Open(x) v ¬Water(x))		Satisfatível	??


∀x (¬(Open(x) => Water(x)))
∀x (¬(~Open(x) v Water(x)))
∀x (Open(x) & ~Water(x)))		Satisfatível	??

∀x (Open(x) => ∃y Water(y))		Tautologia

∃x ∃y (Open(x) ∧ Open(y) ∧ x != y)	Não satisfatível


III.10.

(a)	
• Qualquer animal tem um progenitor
∀a (Animal(a) => ∃p Progenitor(p,a))

• Qualquer animal pertence a uma espécie
∀a (Animal(a) => ∃e Espécie(a,e))

• Apenas os animais pertencem a espécies
∀x ~Animal(x) => ~∃e Espécie(x,e)
∀x ~Animal(x) => ∀e ~Espécie(x,e)
∀x Animal(x) v ∀e ~Espécie(x,e)
∀x ∀e Espécie(x,e) => Animal(x)

• Se p é o progenitor de a e a pertence a uma espécie e, então p
também pertence a e
∀p ∀a ∀e Progenitor(p,a) & Espécie(a,e) => Espécie(p,e)			NOTA: Na implicação as var's que são quantificadas universalmente são as que estão do lado direito desta!
∀p ∀e (∃a Progenitor(p,a) & Espécie(a,e) => Espécie(p,e)

• Uma espécie e está extinta no intervalo t se nenhum animal dessa espécie
está vivo nesse intervalo
∀t ∀e (~∃a Animal(a) & Espécie(a,e) & Vivo(a,t)) => Extinta(e,t)	(1)

• Não existiam mamutes vivos no ano de 1918
~∃m Animal(m) & Especie(m,Mamute) & Vivo(m,1918)		(2)

(b)
Modus Ponens	(1)(2)			{A, A=>B} |- B
Extinta(Mamute,1918)



















 
